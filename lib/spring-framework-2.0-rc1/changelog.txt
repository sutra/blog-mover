SPRING FRAMEWORK CHANGELOG
==========================
http://www.springframework.org


Changes in version 2.0 RC1 (20.6.2006)
--------------------------------------

General
* completed reference documentation
* fixed various documentation issues
* spring.jar includes all standard modules except for the Hibernate2 support (which has been superseded by Hibernate3)
* basic download only contains reference PDF: no HTML variant and API docs anymore (only in -with-dependencies now!)

Package org.springframework.aop
* fixed AspectJAutoProxyCreator to avoid NPE in case of abstract beans without bean class specified

Package org.springframework.beans
* FactoryBeans are allowed to return null values now, with FactoryBeanNotInitializedException to be thrown by themselves
* fixed AbstractBeanFactory's "getType" to avoid NPE in case of a bean definition without bean class
* AbstractBeanFactory uses inverse order of bean instantiation for shutdown even without dependency relationships
* fixed DefaultListableBeanFactory to not call "FactoryBean.getObject()" for prototype if bean class not resolved yet
* avoid ClassNotFoundException in case of explicit type specified on "value" tag
* resolve target type of a TypedStringValue lazily, consistent with the handling of bean classes
* moved parsing-related support classes from "beans.factory"/"beans.factory.support" to "beans.factory.parsing"

Package org.springframework.core
* StaticLabeledEnum offers its "readResolve" method with protected visibility, to kick in for subclasses as well

Package org.springframework.ejb
* fixed AbstractSlsbInvokerInterceptor to reobtain createMethod in case of cacheHome="false"/lookupHomeOnStartup="true"

Package org.springframework.jms
* added "cacheSessions" flag to DefaultMessageListenerContainer, to be turned off for reobtaining Sessions per receive
* added "handleListenerSetupFailure" callback to DefaultMessageListenerContainer, a sibling of "handleListenerException"
* DefaultMessageListenerContainer invokes a specified JMS ExceptionListener for listener setup failures as well

Package org.springframework.orm
* removed LocalSessionFactoryBean's early "buildMappings" call to avoid side effects with AnnotationSessionFactoryBean
* HibernateTransactionManager explicitly disconnects a pre-bound Session after a transaction (on Hibernate 3.1+)
* Hibernate Open-Session-In-View's deferred close mode always switches its Sessions to FlushMode.NEVER until closing
* refined HibernateTemplate to never register a Session for deferred close in case of "alwaysUseNewSession"=true
* removed special Session reconnection check for Hibernate 3.1 RC1
* renamed ContainerEntityManagerFactoryBean to "LocalContainerEntityManagerFactoryBean"
* fixed LocalContainerEntityManagerFactoryBean to always look for "META-INF/persistence.xml" in class path by default
* JpaTransactionManager autodetects the JDBC DataSource of the target EntityManagerFactory

Package org.springframework.samples
* added JPA support to PetClinic: EntityManagerClinic and JpaTemplateClinic, with TopLink Essentials as default provider

Package org.springframework.scheduling
* added "jobListenerNames" bean property to MethodInvokingJobDetailFactoryBean

Package org.springframework.scripting
* fixed "spring-lang.xsd" to allow for multiple nested property elements

Package org.springframework.web
* fixed (the deprecated) BindUtils to not call "ValidatorUtils.invokeValidator" if no Validator given
* fixed Servlet/PortletRequestAttributes to correctly update accessed attributes
* turned WebContentGenerator's method constants public again, for calling "setSupportedMethods" in subclasses
* FrameworkPortlet now catches all RuntimeException/Errors and rethrows them as PortletException
* PortletContentGenerator response preperation operates on RenderRequest and RenderResponse only
* changed Portlet HandlerInterceptor interface to have explicit callback methods for action/render requests
* Portlet HandlerInterceptorAdapter allows to adapt the specific action/render callback methods to general callbacks
* Portlet OpenXxxInViewInterceptors just wrap the render request, not the action request anymore
* VelocityView and FreeMarkerView do not override content type previously set on HTTP response anymore (on Servlet 2.4+)
* moved content type handling from VelocityView and FreeMarkerView up to AbstractTemplateView
* fixed various JSP form tag issues


Changes in version 2.0 M5 (1.6.2006)
------------------------------------

General
* spring.jar is now all-encompassing, including all modules (with the exception of mock and aspects)
* spring-aop.jar does not contain AOP Alliance interfaces (in contrast to spring.jar); explicitly add aopalliance.jar

Package org.springframework.aop
* reworked support for scoped proxies to build on scoping support in core BeanFactory
* removed incomplete support for ScopedObject handles and persistent scopes
* removed deprecated AttributesPooling/Prototype/ThreadLocalTargetSourceCreator
* removed unused Class argument from ParameterNameDiscoverer's "getParameterNames(Method)"
* reworked ProxyFactoryBean's "setProxyInterfaces" method from String array to Class array
* reworked ProxyFactoryBean to use the ClassLoader passed in through BeanClassLoaderAware
* factored out AbstractSingletonProxyFactoryBean from TransactionProxyFactoryBean

Package org.springframework.beans
* introduced lazy loading (and lazy validation) of bean classes in standard bean factories and bean definition readers
* redefined ListableBeanFactory's "includeFactoryBeans" flag for "getBean(Name)sOfType" into "allowEagerInit"
* introduced BeanClassLoaderAware interface, for passing the factory's class loader to beans that resolve class names
* reworked all FactoryBeans that resolve class names to leverage the BeanClassLoaderAware mechanism
* PropertyPlaceholderConfigurer is able to resolve placeholders in lazily loaded bean class names
* added support for PropertyEditorRegistrars to ConfigurableBeanFactory, for non-synchronized usage of custom editors
* CustomEditorConfigurer supports PropertyEditorRegistrars, to be applied to its containing BeanFactory
* reworked ConfigurableBeanFactoryUtils into ResourceEditorRegistrar
* added "postProcessPropertyValues" callback method to InstantiationAwareBeanPostProcessor interface
* reworked RequiredBeanFactoryPostProcessor into RequiredAnnotationBeanPostProcessor, properly handling bean inheritance
* added scoping support to core BeanFactory, for creating raw target beans in arbitrary scopes
* added "scope" attribute at bean level to XML bean definition format, superseding singleton="true"/"false"
* renamed XmlBeanDefinitionReader's (Default)XmlBeanDefinitionParser SPI to (Default)BeanDefinitionDocumentReader
* renamed XmlBeanDefinitionParserHelper to BeanDefinitionParserDelegate
* re-introduced Spring 1.2 XmlBeanDefinitionParser SPI for backwards compatibility in case of "parserClass" specified

Package org.springframework.context
* synchronized AbstractApplicationContext's "refresh()" method, for hot refreshing in concurrent environments

Package org.springframework.core
* renamed GenericsHelper to GenericCollectionTypeResolver, more clearly reflecting its actual role
* AnnotationUtils discovers annotations inherited via bridge methods now, through the new BridgeMethodResolver

Package org.springframework.dao
* added generic PersistenceExceptionTranslator mechanism, supported by the JpaDialect abstraction for JPA providers
* added PersistenceExceptionTranslationPostProcessor, for automatic translation to DataAccessExceptions

Package org.springframework.instrument
* introduced class instrumentation support based on standard ClassFileTransformers (used by JPA SPI support)
* introduced LoadTimeWeaver abstraction for instrumentation-aware ClassLoaders plus throwaway ClassLoader support

Package org.springframework.jdbc
* refined default SQL error codes for DB2 and HSQLDB
* removed deprecated special check for DB2 error codes - always use "DB2*" as database product name for DB2
* reworked SimpleJdbcDaoSupport/NamedParameterJdbcDaoSupport initialization to work without afterPropertiesSet as well

Package org.springframework.orm
* Hibernate3 LocalSessionFactoryBean explicitly calls "buildMappings()" to prepare Configuration metadata for subclasses
* fixed JpaTransactionManager to not cause an NPE when the creation of a transactional EntityManager raises an exception
* fixed JpaInterceptor to actually bind a new EntityManager to the thread again (worked in M3, didn't work in M4)
* fixed EntityManagerFactoryUtils's "convertJpaAccessException" to always return rather than throw DataAccessExceptions
* added full support for JPA SPI, in the form of a ContainerEntityManagerFactoryBean with LoadTimeWeaver support
* added JpaVendorAdapter abstraction, with out-of-the-box TopLinkJpaVendorAdapter and HibernateJpaVendorAdapter
* added PersistenceAnnotationPostProcessor, processing EJB3-style @PersistenceUnit and @PersistenceContext annotations

Package org.springframework.test
* added support classes for annotation-based tests in general and for JPA-based tests in particular

Package org.springframework.transaction
* added "failEarlyOnGlobalRollbackOnly" flag to AbstractPlatformTransactionManager, for consistent fail-early behavior

Package org.springframework.util
* "ClassUtils.isPresent" logs exception message only instead of full stacktrace for classes that haven't been found
* introduced PatternMatchUtils, for unified matching of Spring's typical "xxx*", "*xxx" and "*xxx*" pattern styles

Package org.springframework.validation
* reworked ValidationUtils to not accept a null Validator for "invokeValidator" anymore
* added "setDisallowedFields" method to DataBinder, for specifying disallowed fields instead of allowed fields

Package org.springframework.web
* reworked mvc RequestHandler interface into HttpRequestHandler in root web package, to minimize module dependencies
* reworked RequestMethodNotSupportedException into HttpRequestMethodNotSupportedException in root web package
* reworked SessionRequiredException into HttpSessionRequiredException and PortletSessionRequiredException
* added HttpRequestHandlerServlet to "web.context.support" package, for exposing a single HttpRequestHandler bean
* dropped "getCause()" method from NestedServletException, to avoid conflicts with JDK-1.4-based ServletException class
* added support for request and session scopes to all WebApplicationContexts
* moved StaticPortletApplicationContext from test tree over to main source tree
* fixed SimpleMappingExceptionResolver to use local "exceptionMappings" reference
* factored out reusable "prepareBinder" method in BaseCommandController, for easier overriding of "createBinder"
* InternalResourceView exposes Servlet 2.4 forward request attributes even for Servlet 2.3-
* added "getOriginatingRequestUri" method to UrlPathHelper, detecting the Servlet 2.4 request URI attribute in a forward
* refined JSP form tag library


Changes in version 2.0 M4 (23.4.2006)
-------------------------------------

General
* included "tiger" and "aspectj" source trees in source build (spring-src.zip)
* included spring-src.zip in both release distributions as a convenience
* basic distribution doesn't include build script and exploded source trees anymore

Package org.springframework.aop
* fixed Cglib2AopProxy to register an explicitly given ClassLoader with the CGLIB Enhancer
* deprecated Commons Attributes based TargetSourceCreators (PoolingAttribute, PrototypeAttribute, ThreadLocalAttribute)
* fixed CustomizableTraceInterceptor to expose the actual invocation time for exception messages
* added "trackAllInvocations" flag to JamonPerformanceMonitorInterceptor, for gathering statistics without logging
* auto-proxying works for objects created by FactoryBeans as well (rather than just on FactoryBean instances themselves)
* BeanNameAutoProxyCreator always proxies exposed objects, with "&beanName" syntax for proxying FactoryBean instances
* renamed "aspectj.autoproxy.AspectJAutoProxyCreator" to "aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"

Package org.springframework.beans
* BeanUtils throws explicit BeanInstantiationException in case of bean instantiation failure
* deprecated BeanUtils's "isAssignable" methods in favor of new "isAssignable"/"isAssignableValue" methods on ClassUtils
* fixed BeanWrapperImpl to convert a null input for an array type to a null value rather than an array with null element
* fixed BeanWrapperImpl to apply property-specific editors to elements even for collections without generic type
* refined BeanWrapperImpl to apply map key conversion on property access as well, not just on property setting
* refined BeanWrapperImpl to inject original collections as far as possible (i.e. unless element conversion necessary)
* refined BeanWrapperImpl to correctly detect element type of collections with parameterization in superclass/interface
* BeanWrapperImpl does not register a StringArrayPropertyEditor by default anymore
* fixed BeanWrapperImpl to convert a ManagedProperties instance into a plain Properties instance before applying it
* fixed BeanWrapperImpl to fall back to approximate collection/map type if it cannot reinstantiate given collection/map
* fixed BeanArrayPropertyEditor to translate null value to null byte array
* added CharArrayPropertyEditor to translate String value into char array
* CharacterEditor supports unicode specification passed in as literal String, for example "\u00F6"
* refined FileEditor to treat absolute file paths as straight files (no ResourceLoader), for Spring 1.2 compatibility
* PropertyPlaceholderConfigurer catches and logs SecurityException on system property access, continuing resolution
* FieldRetrievingFactoryBean is able to access non-public fields as well
* added "propertiesArray" bean property to PropertiesFactoryBean, for merging multiple local Properties instances
* fixed AbstractBeanFactory to avoid potential deadlock on singleton destruction with concurrent singleton creation
* AbstractBeanFactory always registers inner beans with a unique name, adapting overlapping names accordingly
* AbstractBeanFactory caches objects returned from "FactoryBean.getObject()" now, in case of a singleton object
* BeanPostProcessor's "postProcessAfterInitialization" gets applied to objects created by FactoryBeans as well
* BeanPostProcessor's "postProcessAfterInitialization" gets applied after "postProcessBeforeInstantiation" as well
* fixed DefaultListableBeanFactory to not preinstantiate bean definition if explicit singleton object already registered
* added "loadBeanDefinitions(String[] locations)" method to BeanDefinitionReader and AbstractBeanDefinitionReader
* added Requiered annotation and RequiredBeanFactoryPostProcessor, allowing to enforce required bean properties

Package org.springframework.context
* refined AbstractMessageSource to resolve arguments eagerly, for message defined in parent and msg arg defined in child
* added (String[], Class) constructors to ClassPathXmlApplicationContext, allowing to load relative to a specified class

Package org.springframework.core
* refined NestedXxxException to be serialization-compatible with Spring 1.2
* refined NestedXxxException to properly handle null message in root cause, through using the cause's "toString()"
* fixed FileSystemResource/UrlResource to retain leading "../" parts in paths, building correct relative paths for them
* ResourceEditor resolves placeholders in resource locations against system environment variables as well

Package org.springframework.dao
* introduced PermissionDeniedDataAccessException, thrown for valid operation that was rejected due to lack of permission

Package org.springframework.jdbc
* added "permissionDeniedCodes" category to SQLErrorCodes, with default code 229 for MS SQL Server in sql-error-codes
* JdbcTemplate's "queryForString"/"queryForInt"/etc methods correctly detect incorrect result sizes even for null values
* turned JdbcTemplate's "query(PreparedStatementCreator,PreparedStatementSetter,ResultSetExtractor rse)" method public
* JdbcTemplate does not check static SQL for bind parameters anymore, to avoid overhead of double parsing
* improved JdbcTemplate's logging of ignored SQLWarnings, including SQL state and error code in the log output
* refined NativeJdbcExtractorAdapter to retry with DatabaseMetaData Connection if extraction failed (for Hibernate 3.1)
* added NamedParameterJdbcTemplate which provides named parameters support for query and update functionality
* added "allowsUnusedParameters()" and "checkCompiled()" methods to RdbmsOperation, for better customizing in subclasses
* refined StoredProcedure to accept unused entries in given parameter Maps by default
* added named parameters support to SqlQuery/SqlUpdate hierarchy of classes

Package org.springframework.jms
* AbstractMessageListenerContainer prefers SessionAwareMessageListener over MessageListener (if both are implemented)
* added "exceptionListener" property to AbstractMessageListenerContainer, accepting a standard JMS ExceptionListener
* added "handleListenerException" template method to AbstractMessageListenerContainer, by default logging at error level
* fixed DefaultMessageListenerContainer to properly use separate invokers per thread, for actually concurrent Sessions
* fixed ServerSessionMessageListenerContainer(102) to use "createSession(Connection)" method to avoid JMS 1.1 dependency
* added MessageListenerAdapter(102), delegating to listener methods that operate on content types (String, byte array)

Package org.springframework.jmx
* reworked NotificationListenerBean to avoid overloaded bean property setters for "mappedObjectNames"

Package org.springframework.mail
* refined JavaMailSenderImpl to use "Session.getInstance(properties, null)", for compatibility with (old) JavaMail 1.1

Package org.springframework.mock
* added overloaded constructors to MockFilterConfig, using a MockServletContext instead of a ServletContext argument

Package org.springframework.orm
* updated JDO API 2.0 jar to 2.0 RC1 from the Apache JDO project
* updated JPA API 1.0 jar to build 40 from the GlassFish project
* fixed LocalSessionFactoryBean's "updateDatabaseSchema" to declare the correct exception (DataAccessException)
* fixed BlobStringType for Hibernate2/3 to correctly handle SQL NULL
* refined JDO PersistenceManagerFactoryUtils to explicitly suspend pre-bound PM in the course of transaction suspension
* refined JPA EntityManagerFactoryUtils to explicitly suspend pre-bound EM in the course of transaction suspension
* removed support for obsolete "EntityManagerFactory.getEntityManager()" method from LocalEntityManagerFactoryBean
* added "entityManagerInterface" property to SharedEntityManagerAdapter, for exposing a vendor-extended interface
* adapted OpenEntityManagerInViewFilter/Interceptor to not specify obsolete PersistenceContextType.EXTENDED anymore
* fixed JpaDaoSupport's "setEntityManager" method to accept an EntityManager instead of an EntityManagerFactory
* removed "getEntityManager()"/"getEntityManagerFactory()" accessor methods from JpaDaoSupport
* removed "allowCreate" flag from JpaTemplate, always allowing creation (analogous to shared EntityManager)
* added "exceptionConversionEnabled" flag to HibernateInterceptor, TopLinkInterceptor, JdoInterceptor, JpaInterceptor

Package org.springframework.remoting
* HTTP invoker and RMI invoker fill the client-side portion of the stack trace into transferred exceptions now
* RmiClientInterceptorUtils throws clearer exception message in case of proxy mismatch (for underlying RMI stubs)
* added "setContentType" configuration method to HttpInvokerServiceExporter and AbstractHttpInvokerRequestExecutor
* built client-side HTTP GZIP response support into SimpleHttpInvokerRequestExecutor/CommonsHttpInvokerRequestExecutor
* JaxRpcPortClientInterceptor synchronizes creation of JAX-RPC Calls, to make dynamic invocations with Axis thread-safe
* refined JaxRpcPortClientInterceptor to only use JAX-RPC port if "portInterface" specified (prefer dynamic invocations)
* added "setCustomPropertyMap" method to JaxRpcPortClientInterceptor/ProxyFactoryBean, accepting String-Object pairs
* added AxisBeanMappingServicePostProcessor to "jaxrpc.support" package, for declarative registration of bean mappings

Package org.springframework.scheduling
* refined Quartz SchedulerFactoryBean to re-register the associated JobDetail when overwriting a JobDetailAwareTrigger
* fixed Quartz SchedulerFactoryBean to handle potential cluster race condition on trigger registration

Package org.springframework.scripting
* AOP-based auto-proxying works for scripted objects as well now
* added "lang" namespace for XML schema definitions, providing configuration for beans written in dynamic languages

Package org.springframework.transaction
* AbstractPlatformTransactionManager logs "Should roll back transaction but cannot" message at debug level (not warn)
* TransactionInterceptor logs application exception at error level if commit throws an exception

Package org.springframework.util
* added null-safe hashCode and toString methods to ObjectUtils (analogous to JDK 1.5), moved over from Spring Modules
* fixed StringUtils's "endsWithIgnoreCase" to correctly handle any String length
* fixed CollectionsUtils's "hasUniqueObject" to correctly handle null values
* refined NumberUtils to perform a value-in-range check for any Number returned from a NumberFormat
* reworked MethodInvoker to match arguments against parameter types when searching for a matching method

Package org.springframework.validation
* renamed SimpleMapBindingResult to MapBindingResult
* DataBinder does not use a default StringArrayPropertyEditor anymore, to nicely handle select list entries with commas
* fixed ValidationUtils's "invokeValidator" to work correctly even in case of a null reference as object to be validated
* added BindingResultUtils, providing convenience methods for looking up BindingResults in a model Map

Package org.springframework.web
* refined GenericFilterBean to fully support initialization as bean in a Spring bean factory (without FilterConfig)
* refined OncePerRequestFilter to fall back to bean name or fully qualified class name if no filter name is available
* refined FrameworkServlet to log a request handling failure at debug level rather than error level
* refined AbstractRefreshablePortletApplicationContext to take PortletContext from PortletConfig if not explicitly set
* factored out "handleNoSuchRequestHandlingMethod" method in MultiActionController, to be overridden in subclasses
* fixed SimpleMappingExceptionResolver to correctly check the depth of all exception mappings before choosing a view
* refined SimpleMappingExceptionResolver to only apply a "defaultStatusCode" to a top-level request (not to an include)
* added "clearCache()" method to AbstractCachingViewResolver, for removing all cached view objects
* optimized BeanNameViewResolver to avoid internal throwing and catching of NoSuchBeanDefinitionExceptions
* ExpressionEvaluationManager supports concatenated expressions (e.g. "${var1}text${var2}") on all JSP 2.0 engines
* added optional caching of JSP 2.0 Expressions, driven by "cacheJspExpressions" context-param in web.xml (true/false)
* "javaScriptEscape" feature of Spring tags correctly escapes "</script>" inside a literal value
* fixed JSP SelectTag to correctly handle null values
* AbstractJasperReportsView and subclasses require JasperReports 1.0.1 or higher (removed backwards compatibility check)
* fixed AbstractJasperReportsView and subclasses to be compatible with J2EE <1.4 (avoid response.setCharacterEncoding)
* AbstractJasperReportsView autodetects a JDBC DataSource in the model, as alternative to specifying it in configuration
* Struts ContextLoaderPlugIn ignores "Action.setServlet(ActionServlet)" method when performing a dependency check
* optimized Struts Delegating(Tiles)RequestProcessor to avoid unnecessary NoSuchBeanDefinitionException throw+catch
* added Autowiring(Tiles)RequestProcessor, autowiring created Actions (configurable through ActionServlet init-params)


Changes in version 2.0 M3 (8.3.2006)
------------------------------------

Package org.springframework.aop
* AbstractBeanFactoryBasedTargetSource offers explicit "setTargetClass" method, else determines target class on demand
* renamed AbstractLazyInitTargetSource to AbstractLazyCreationTargetSource
* renamed AbstractPerformanceMonitorInterceptor to AbstractMonitoringInterceptor
* refined DebugInterceptor to keep its count in a field of type long instead of int, with "long getCount()" accessor
* fixed DebugInterceptor to properly synchronize access to its count field in a multithreading environment

Package org.springframework.beans
* factored out extended PropertyAccessor and ConfigurablePropertyAccessor interfaces from BeanWrapper/BeanWrapperImpl
* BeanWrapperImpl supports PropertyEditors exposed by PropertyDescriptors (typically from BeanInfo classes)
* BeanWrapperImpl passes a null value to a PropertyEditor's "setValue" method, allowing for conversion of null values
* changed MutablePropertyValues's "addPropertyValue" signature back to void, to remain binary compatible with Spring 1.2
* fixed PropertyTypeConverter to never build "null[...]" property paths that lead to exceptions in "findCustomEditor"
* fixed ArgumentConvertingMethodInvoker to perform conversion attempts on a copy of the argument array (not the source)
* added "nullAsEmptyCollection" flag to CustomCollectionEditor, allowing to convert a null value to an empty Collection
* added "containsLocalBean" method to HierarchicalBeanFactory interface, refactored from AbstractApplicationContext
* fixed AbstractBeanFactory to use canonical bean name (id) for prototype creation, exposing it to BeanPostProcessors
* fixed AbstractBeanFactory to destroy a failed bean completely, including dependent beans (in case of eager references)
* fixed AbstractBeanFactory's definition caching to allow for proper placeholder substitution even with parent/child
* added "configureBean" method to AutowireCapableBeanFactory, fully configuring an instance based on a bean definition
* DefaultListableBeanFactory does not instantiate "factory-bean" references anymore, not even for eager-init singletons
* re-added support for deprecated "class" property to PropertiesBeanDefinitionReader, alongside "(class)"
* DefaultXmlBeanDefinitionParser considers "" as default namespace as well, for compatibility with the Oracle XML parser

Package org.springframework.context
* AbstractApplicationContext discovers its context MessageSource as "messageSource" bean even through an alias

Package org.springframework.core
* added "getRootCause()" method to NestedRuntime/CheckedException, for retrieving the innermost exception
* refined PropertiesLoaderUtils to use a URLConnection with "setUseCaches(false)", to avoid jar file locking on Windows

Package org.springframework.jdbc
* added further default SQL error codes for MS SQL, MySQL, and Oracle
* refined DataSourceUtils to expect an "afterCompletion" callback from a different thread (in case of JTA transaction)

Package org.springframework.jms
* reworked DefaultMessageListenerContainer to allow for breaking the receive loop into smaller, schedulable tasks
* DefaultMessageListenerContainer defaults "maxMessagesPerTask" to 1 for short-lived-preferring SchedulingTaskExecutor
* renamed ServerSessionMessageListenerContainer's "maxMessages" to "maxMessagesPerTask", for consistency

Package org.springframework.jmx
* fixed MBeanServerConnectionFactoryBean to avoid potential initialization of unused JMX Connector on shutdown

Package org.springframework.jndi
* added "defaultObject" property to JndiObjectFactoryBean, allowing to fall back to default object if JNDI lookup fails

Package org.springframework.mock
* MockServletContext's "getResourcePaths" correctly resolves directories as paths that end with a slash
* MockHttpServletResponse detects charset specification in "setContentType" and sets character encoding accordingly
* fixed AbstractTransactionalSpringContextTests's "startNewTransaction" to initialize "complete" to "!defaultRollback"

Package org.springframework.orm
* Hibernate LocalSessionFactoryBean offers protected "executeSchemaStatement" method for overriding the failure handling
* fixed JpaTemplate's "findByNamedQuery" to correctly apply parameter indexes starting from 1

Package org.springframework.scheduling
* added SchedulingTaskExecutor interface, letting an executor declare a preference for short-lived tasks
* all thread-pool-backed executors implement SchedulingTaskExecutor to expose a preference for short-lived tasks
* added SchedulingAwareRunnable interface, exposing an "isLongLived" flag (analogous to CommonJ's "isDaemon")
* CommonJ WorkManagerTaskExecutor/DelegatingWork exposes SchedulingAwareRunnable's "isLongLived" flag appropriately
* fixed TimerFactoryBean to properly initialize even without "scheduledTimerTasks" configured

Package org.springframework.scripting
* fixed ScriptFactoryPostProcessor to let scripts receive bean references up the entire container hierarchy

Package org.springframework.transaction
* added CompositeTransactionAttributeSource and "setTransactionAttributeSources([])" method for TransactionInterceptor
* JtaTransactionManager autodetects JNDI location "java:pm/TransactionManager" on Borland and Sun application servers

Package org.springframework.util
* fixed ResponseTimeMonitorImpl to properly synchronize access to its instance variables in a multithreading environment

Package org.springframework.validation
* added further accessors to Errors interface: hasFieldErrors(), getFieldErrorCount(), getFieldErrors(), getFieldError()
* introduced BindingResult interface, as extension of the Errors interface
* reworked BindException to implement the BindingResult interface, wrapping an existing BindingResult
* added BeanPropertyBindingResult and SimpleMapBindingResult implementations, based on a refactoring of BindException
* added "BindingResult getBindingResult()" method to DataBinder, deprecating the "BindException getErrors()" method
* adapted BindingErrorProcessor interface to operate on a BindingResult instead of a BindException
* added support for direct field access in the form of DirectFieldBindingResult and DataBinder's "initDirectFieldAccess"

Package org.springframework.web
* changed WebApplicationContext's "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE" to actually start with the package name
* ContextLoader throws IllegalStateException if there is already a root application context present
* fixed DispatcherServlet to keep and restore previous thread-bound LocaleContext and RequestAttributes
* added overloaded "getModelAndView" method with HttpServletRequest argument to SimpleMappingExceptionResolver
* added "cookieSecure" property to CookieGenerator, indicating that cookies should only be sent using HTTPS connections
* added schema support for configuring a SimpleUrlHandlerMapping using spring-web.xsd
* renamed "Handler" interface to "RequestHandler", to differentiate it from the dispatcher's generic "handler" concept
* moved ControllerClassNameHandlerMapping from package "web.servlet.mvc.mapping" to "web.servlet.mvc"
* added "useDirectFieldAccess()" template method to BaseCommandController, for initializing the DataBinder accordingly
* added overloaded "onFormChange" method with BindException argument to SimpleFormController
* MultiActionController does not consider "handleRequest" itself as handler method (to avoid potential stack overflow)
* added full JSP 1.2 form tag library in package "web.servlet.tags", complementing the existing base tag library
* upgraded VelocityToolboxView to use Velocity Tools 1.2+ API and avoid using deprecated earlier API
* added VelocityLayoutViewResolver, a convenience subclass of VelocityViewResolver with support for VelocityLayoutView
* added protected "callNextHandlerInChain" method to DecoratingNavigationHandler, to be called by subclasses


Changes in version 2.0 M2 (1.2.2006)
------------------------------------

Overall
* all of Spring must be built on JDK 1.5 now; the test suite is still able to run on JDK 1.4 and 1.3

Package org.springframework.aop
* added equals/hashCode implementations to all pointcuts and advisors
* removed restriction on proxying protected methods from Cglib2AopProxy
* allowed AopUtils's "invokeJoinpointUsingReflection" to invoke protected methods
* added "autodetectInterfaces" to ProxyFactoryBean, for TransactionProxyFactoryBean style behavior (is the default now!)
* refined ProxyFactoryBean to lazily initialize a singleton proxy, to let "getObjectType()" expose the type beforehand
* improved performance of IntroductionInfoSupport by faster determination of whether method is on introduced interface
* refined ThreadLocalTargetSource's synchronization to guarantee thread-safe destruction on shutdown
* added "hideProxyClassNames" property to AbstractTraceInterceptor, to log with target class instead of proxy class
* added "target.dynamic" package to support dynamic refresh of object instances
* added BeanFactoryRefreshableTargetSource to allow object instances to be refreshed with new instances from BeanFactory
* AspectJ binding from pointcut expressions to arbitrary advice method arguments now working
* support for introductions using AspectJ @DeclareParents
* support for new AspectJ 5 "pertypewithin" aspect instantiation model
* completed implementation of @AspectJ integration class MethodInvocationProceedingJoinPoint

Package org.springframework.beans
* fixed PropertyAccessorUtils's "getLastNestedPropertySeparatorIndex" to correctly handle property paths without dot
* added overloaded constructor to StringArrayPropertyEditor, allowing to specify a custom separator for String splitting
* BeanWrapperImpl keeps registered editors in a linked Map: the first registered editor that matches will be used
* BeanWrapperImpl caches registered editors that match superclass or interface, to avoid repeated assignable-from checks
* added support for bean properties with generic Collections/Maps, auto-converting to their element/key/value type
* added support for constructor arguments with generic Collections/Maps, auto-converting to their element/key/value type
* added "merge" attribute to "list"/"set/"map"/"props", for merging of collection values across parent/child definitions
* added "default-merge" attribute to "beans" element to allow control of collection merging at the file level
* changed FileEditor's behavior to consider input text as standard Spring resource location (instead of plain filename)
* added "postProcessAfterInstantiation" method to InstantiationAwareBeanPostProcessor
* fixed AbstractBeanFactory to correctly delegate to parent BeanFactory from "isFactoryBean"
* optimized AbstractBeanFactory to avoid internal NoSuchBeanDefinitionException throw+catch as far as possible
* AbstractBeanFactory caches merged bean definitions, for efficient prototype child creation and CGLIB class reuse
* reworked AbstractBeanFactory's currently-in-creation check to log debug message when unfinished singleton is returned
* added "allowCircularReferences" flag to AbstractAutowireCapableBeanFactory, to disallow circular references completely
* DefaultListableBeanFactory's "getBeansOfType" logs BeanCurrentlyInCreationException message instead of stacktrace
* refined DefaultXmlBeanDefinitionParser to explicity check for empty ref name and throw meaningful exception
* DefaultXmlBeanDefinitionParser wraps unexpected exceptions in BeanDefinitionStoreException with context info
* inner bean parsing/instantiation exceptions get wrapped in outer exceptions with appropriate context information
* moved general bean wiring support from "beans.factory.aspectj" to "beans.factory.wiring"/"beans.factory.annotation"
* renamed AspectJ AnnotationBeanConfigurer to AnnotationBeanConfigurerAspect
* deprecated BeanFactoryBootstrap in favor of using a BeanFactoryLocator or a custom bootstrap class

Package org.springframework.context
* refined AbstractApplicationContext to never register more than one JVM shutdown hook
* deprecated ConsoleListener, since it doesn't serve any purpose

Package org.springframework.core
* JdkVersion explicitly detects JDK 1.6 and 1.7 as well (does not mis-detect 1.6 as 1.3 anymore)
* refined Jdk13ControlFlow to be compatible with GNU ClassPath (whose stacktrace has a whitespace after the method name)
* added NestedIOException, deriving from java.io.IOException and adding NestedCheckedException-style root cause handling
* refined AbstractResource to work around "FilterInputStream.close()" NPE, simply catching Throwable and ignoring it
* PathMatchingResourcePatternResolver considers URL protocol "wsjar" as jar file (to load from WebSphere-managed jars)
* ResourceArrayPropertyEditor can translate a set/list of patterns into a Resource array (rather than just one pattern)
* split previous AnnotationUtils delegatetetetete into core.annotation.AnnotationUtils and beans.annotation.AnnotationBeanUtils

Package org.springframework.jdbc
* DataSourceTransactionManager only attempts to release Connection if not pre-bound (to avoid inappropriate log message)
* TransactionAwareDataSourceProxy works correctly in combination with JdbcTemplate and transaction suspend/resume now
* fixed SingleColumnRowMapper to explicitly check "ResultSet.wasNull()" after "getInt"/"getLong"/"getFloat" etc
* turned visibility of "org.springframework.jdbc.core.StatementCreatorUtils" to package-protected
* removed ResultReader interface (sub-interface of RowCallbackHandler): use RowMapper instead
* reworked RowMapperResultReader adapter into RowMapperResultSetExtractor
* reworked ResultSetSupportingSqlParameter to expose a RowMapper directly through a "getRowMapper()" method
* reworked SqlQuery and subclasses to work with a RowMapper instead of a ResultReader -> "newRowMapper" template method
* fixed BatchSqlUpdate's constructor that takes a "batchSize" argument to correctly interpret it as batch size
* added "trackRowsAffected" property to BatchSqlUpdate, allowing to turn off the row counts list to save memory
* refined JdbcBeanDefinitionReader to offer constructors with BeanDefinitionRegistry and PropertiesBeanDefinitionReader

Package org.springframework.jmx
* fixed MBeanExporter to work correctly with an "excludedBeans" list that it not sorted by bean name ascending
* fixed "persistPeriod" default to be -1 even in ManagedResource attribute (not just in ManagedResource annotation)

Package org.springframework.mock
* made "servletContextName" and "portletContextName" configurable in MockServletContext respectively MockPortletContext
* added "set/removeParameter" methods to MockHttpServletRequest, allowing to replace/remove existing parameters
* added alternative MockPortalContext constructor that accepts custom PortletMode and WindowState lists
* reworked MockActionResponse and MockPortletURL to check against list of supported PortletModes/WindowStates

Package org.springframework.orm
* SqlMapClientTemplate always works with SqlMapSession and provided Connection to enable proper batching in all cases
* added "configLocations" property to LocalSessionFactoryBean for Hibernate3, allowing to load multiple config files
* LocalSessionFactoryBean supports cache regions specified through "entity/collectionCacheStrategies" (on Hibernate 3.1)
* LocalSessionFactoryBean supports multiple event listeners per type through "eventListeners" (on Hibernate 3.1)
* added optional SpringSessionContext for Hibernate 3.1, to plug Spring into "getCurrentSession()" without proxying
* added "replicate" convenience methods to HibernateTemplate for both Hibernate2 and Hibernate3
* added BlobStringType with configurable character encoding for both Hibernate2 and Hibernate3
* updated Spring's JDO 2.0 support to JDO API 2.0 beta (as provided by Apache, corresponding to JPOX 1.1.0-beta-6)
* added full support for Java Persistence API 1.0 (JPA) Public Final Draft, in package "org.springframework.orm.jpa"

Package org.springframework.samples
* updated "views.properties" files in all sample applications to use "(class)" and "(parent)"
* renamed PetClinic's "Entity" base class to "BaseEntity", to avoid name collision with the JPA Entity annotation
* marked JPetStore's OrderForm, AccountForm and UserSession as Serializable

Package org.springframework.scheduling
* removed special Quartz 1.3 check from SchedulerFactoryBean: requires Quartz 1.4 or higher now
* added support for Quartz 1.5's merged JobDataMap to QuartzJobBean, falling back to plain JobDataMap on Quartz 1.4

Package org.springframework.scripting
* introduced scripting package based on ScriptFactory and ScriptSource abstractions
* added support for BeanShell, Groovy and JRuby scripted objects

Package org.springframework.test
* fixed AbstractDependencyInjectionSpringContextTests's "populateProtectedVariables" to avoid incorrect warnings
* added "startNewTransaction()" method to AbstractTransactionalSpringContextTests

Package org.springframework.transaction
* refined AbstractPlatformTransactionManager to suspend synchronizations before the actual transaction (not after)
* fixed AbstractPlatformTransactionManager to serialize all relevant state
* fixed TransactionInterceptor to correctly serialize TransactionAspectSupport state
* marked AnnotationTransactionAttributeSource as Serializable

Package org.springframework.ui
* added ModelMap, providing "addObject" methods that auto-generate model attribute names according to conventions
* added "defaultEncoding" bean property to FreeMarkerConfigurationFactory(Bean), inherited by FreeMarkerConfigurer
* added overloaded methods to JasperReportsUtils to allow exporter parameter to be specified for specific formats

Package org.springframework.util
* ClassUtils's "forName(String)" method uses "getDefaultClassLoader()" instead of thread context ClassLoader only
* fixed "StringUtils.delimitedListToStringArray" to properly handle an empty String as delimiter
* refined StopWatch to not add new lines for "shortSummary()" but rather only for "prettyPrint()"
* fixed ConcurrencyThrottleSupport to serialize all relevant state

Package org.springframework.validation
* DataBinder registers suppressed fields in BindException, which offers a "getSuppressedFields()" accessor now

Package org.springframework.web
* "contextConfigLocation" params in "web.xml" support "${...}" style placeholders for system properties
* deprecated BindUtils and BindInitializer in package "web.bind" in favor of direct ServletRequestDataBinder usage
* deprecated RequestUtils in package "web.bind" in favor of ServletRequestUtils
* renamed RequestUtils in package "web.portlet.bind" to PortletRequestUtils
* reworked MultipartException to derive from NestedIOException instead of NestedServletException, for Portlet reuse
* upgraded CommonsMultipartResolver to Commons FileUpload 1.1 (not using deprecated FileUpload 1.0 API anymore)
* added PortletMultipartResolver abstraction, with CommonsPortletMultipartResolver implementation as default
* added multipart support to PortletRequestDataBinder, with factored-out common functionality in WebDataBinder
* reworked RequestContextHolder to hold a RequestAttributes facade instead of a full HttpServletRequest
* added RequestContextHolder support to DispatcherPortlet, to enable Request/SessionScopeMap with portlets
* refactored RequestHandledEvent into RequestHandledEvent base class and ServletRequestHandledEvent subclass
* renamed FrameworkPortlet's RequestHandledEvent to PortletRequestHandledEvent, a subclass of RequestHandledEvent
* PortletBean ignores init-params that do not match bean properties, analogous to HttpServletBean
* DispatcherServlet does not log handler exceptions at warn level anymore but rather only at debug level
* fixed DispatcherPortlet to properly support an exposed View object in a given ModelAndView
* reworked Servlet ModelAndView and Portlet ModelAndView to fully support ModelMap's conventional attribute names
* added HttpSessionMutexListener and "WebUtils.getSessionMutex", used by AbstractController's "synchronizeOnSession"
* added "PortletUtils.getSessionMutex", used by the Portlet AbstractController's "synchronizeOnSession"
* added "FacesContextUtils.getSessionMutex", to make HttpSessionMutexListener's session mutex available to JSF code
* turned AbstractController's "passAllParametersToRenderPhase"/"clearAllRenderParameters" into PortletUtils methods
* added "propertyEditorRegistrars" property to BaseCommandController, for applying PropertyEditorRegistrars
* added "propertyEditorRegistrars" property to Portlet BaseCommandController, for applying PropertyEditorRegistrars
* added "bindingErrorProcessor" property to Portlet BaseCommandController, for configurable BindingErrorProcessor
* turned AbstractCommandController's and AbstractFormController's "handleRequestInternal" methods non-final
* refactored AbstractFormController's session form check into one single place, throwing SessionRequiredException
* reworked MultiActionController's "bind" and "createBinder" to work on HttpServletRequest instead of ServletRequest
* deprecated MultiActionController's "initBinder(ServletRequest...)" in favor of "initBinder(HttpServletRequest...)"
* refined ParameterMethodNameResolver to treat an empty method name as no name at all, letting the default kick in
* added protected accessors for UrlBasedViewResolver's bean properties, allowing subclasses to access the settings
* added "argumentSeparator" property to MessageTag, allowing to specify a custom separator instead of the default comma
* added "useSingleModelNameAsRoot" property to AbstractXlstView, allowing to enforce the value of the "root" property
* added RequestToViewNameTranslator strategy to allow DispatcherServlet to auto-generate view names where necessary
* added DefaultRequestToViewNameTranslator to provide intuitive defaults for automatic view name generation
* refined Struts DelegatingActionProxy and Delegating(Tiles)RequestProcessor to fall back to root WebApplicationContext
* added DelegatingNavigationHandlerProxy and DelegatingPhaseListenerMulticaster to JSF support (used by Spring Web Flow)


Changes in version 2.0 M1 (22.12.2005)
--------------------------------------

Overall
* removed all deprecated classes and methods
* removed support for iBATIS SQL Maps 1.3 (if you haven't done so already, upgrade to iBATIS SQL Maps 2.0/2.1!)
* added explicit support for Hibernate 3.1 while remaining compatible with Hibernate 3.0 (as far as possible)
* factored out "spring-jdo", "spring-hibernate2/3", "spring-toplink", "spring-ojb" jars (not in "spring.jar" anymore!)
* distributed first AspectJ aspects (for transaction management and DI of objects not instantiated by Spring container)

Package org.springframework.aop
* added support for AspectJ pointcut expressions, specified in AspectJ pointcut language
* added support for AspectJ aspect implementations, both for classic AspectJ style and the AspectJ 5 annotation style
* added @Configurable annotation plus BeanConfigurer aspect to allow injection on any arbitrary object through AspectJ
* added AopNamespaceHandler to support dedicated "aop:*" XML tags

Package org.springframework.beans
* added intelligent error messages to BeanWrapperImpl when properties are not found
* fixed BeanWrapperImpl to pass its "extractOldValueForEditor" setting on to nested BeanWrappers
* refined BeanWrapperImpl to perform the accessible checking for read/write methods before every invocation
* changed "MutablePropertyValues.addPropertyValue(String, Object)" to return 'this'
* removed deprecated "getBeanDefinitionNames(type)" method from ListableBeanFactory and BeanFactoryUtils
* added "createBean" and "initializeBean" methods to AutowireCapableBeanFactory interface
* fixed AbstractBeanFactory to allow child bean definitions to refer to a parent via its alias name
* DefaultListableBeanFactory is able to call non-public factory methods as well
* PropertiesBeanDefinitionReader trims String values for special keys such as "(class)", "(parent)", etc
* added "default-init-method" and "default-destroy-method" attributes to the XML bean definition format
* added support for XSD-driven XML bean definitions, with pluggable namespace handlers
* added UtilNamespaceHandler to support dedicated "util:*" XML tags

Package org.springframework.core
* introduced TaskExecutor abstraction, as strategy interface for the execution of Runnables
* added SyncTaskExecutor and SimpleAsyncTaskExecutor as simple default implementations of the TaskExecutor interface

Package org.springframework.context
* added "getAutowireCapableBeanFactory()" accessor to ApplicationContext interface, for direct access without casting
* refined AbstractApplicationContext's lifecycle behavior to properly ignore repeated "close()" calls
* moved DefaultListableBeanFactory's cleanup on "preInstantiateSingletons()" behavior to AbstractApplicationContext
* reworked SimpleApplicationEventMulticaster to delegate to a TaskExecutor, using a SyncTaskExecutor as default

Package org.springframework.dao
* introduced EmptyResultDataAccessException as specific subclass of IncorrectResultSizeDataAccessException

Package org.springframework.jdbc
* added further error codes for Oracle and MySQL to default "sql-error-codes.xml" file
* OracleLobHandler lazily initializes Oracle driver classes, always loading via the actual Connection's class loader
* fixed DataSourceUtils to correctly re-suspend a Connection even if the Connection hasn't been used since resume
* fixed JdbcTemplate to extract the JDBC Connection for CallableStatementCreators if a NativeJdbcExtractor has been set
* factored out protected "getColumnMapRowMapper" and "getSingleColumnRowMapper" hooks within JdbcTemplate
* SingleColumnRowMapper throws specific IncorrectResultSetColumnCountException in case of invalid column count
* SingleColumnRowMapper explicitly calls "ResultSet.getBigDecimal()" if the required type is BigDecimal
* added SimpleJdbcTemplate with ParameterizableRowMapper for Java 5, leveraging varargs and generics

Package org.springframework.jms
* SimpleMessageConverter accepts a passed-in raw JMS Message and returns a raw JMS Message if content type is unknown
* added DefaultMessageListenerContainer mechanism for async message reception via the plain JMS MessageConsumer API
* added SimpleMessageListenerContainer mechanism for async message reception via the plain JMS MessageListener API
* added ServerSessionMessageListenerContainer mechanism for async message reception via the JMS ServerSessionPool API

Package org.springframework.jmx
* introduced MBeanExportOperations interface, providing a programmatic facility for registering MBeans on MBeanExporter
* introduced MBeanExportException as unified exception hierarchy for MBeanExporter and MBeanExportOperations
* MBeanExporter no longer ignores autodetected MBeans with invalid object names: specify appropriate "excludedBeans"
* added support for registering NotificationListeners with the MBeanServer
* added @ManagedNotification(s) annotation (and corresponding Commons attributes) for describing notification MBeanInfo
* extended static MBeanInfoAssemblers to support configuration of Notification metadata
* added NotificationPublisher(Aware) to support publication of JMX Notifications from Spring-managed beans
* added MBeanExporter option to have Spring extend ObjectNames to ensure they are unique per-instance
* added MBeanExporter option to have Spring expose the ClassLoader of the managed resource before MBean invocations

Package org.springframework.jndi
* added JndiNamespaceHandler to support dedicated "jndi:*" XML tags

Package org.springframework.orm
* JdoTransactionManager does explicit "isActive()" check before attempting a rollback, to avoid illegal state exception
* HibernateTransactionManager autodetects Hibernate 3.1 to support its native transaction timeout
* removed "save" operations with explicit id argument from HibernateTemplate (following Hibernate 3.1's removal)
* upgraded FilterDefinitionFactoryBean to Hibernate 3.1 (which changed its FilterDefinition in an incompatible fashion)
* upgraded IdTransferringMergeEventListener to Hibernate 3.1 (which changed its listener API in an incompatible fashion)
* Hibernate LocalSessionFactoryBean exposes its DataSource on "SessionFactory.close()", for potential schema export

Package org.springframework.remoting
* RmiServiceExporter performs explicit RMI unexport if binding to the registry failed, to avoid dangling exports
* JaxRpcPortClientInterceptor/ProxyFactoryBean apply given JaxRpcServicePostProcessors to existing JAX-RPC Service too
* HttpInvokerServiceExporter, HessianServiceExporter and BurlapServiceExporter implement Handler instead of Controller
* HttpInvokerRequestExecutor is allowed to throw any Exception, not just IOException and ClassNotFoundException

Package org.springframework.scheduling
* TimerFactoryBean creates a non-daemon Timer by default, to let running tasks finish after Timer was cancelled
* added TimerTaskExecutor adapter for accessing a "java.util.Timer" through the TaskExecutor interface
* added "taskExecutor" property to Quartz SchedulerFactoryBean, for replacing Quartz's default thread pool
* added SimpleThreadPoolTaskExecutor for Quartz, allowing to define Quartz's default thread pool as Spring TaskExecutor
* added scheduling-style support for the JDK 1.5 ThreadPoolExecutor mechanism in the "java.util.concurrent" package
* added ConcurrentTaskExecutor adapter for accessing a JDK 1.5 Executor through the TaskExecutor interface
* added scheduling-style support for the CommonJ TimerManager API, as supported by WebLogic 9 and WebSphere 6
* added WorkManagerTaskExecutor adapter for accessing a CommonJ WorkManager through the TaskExecutor interface

Package org.springframework.samples
* upgraded JPetStore (standard and annotation version) to use the new XML schema namespaces "aop", "tx" and "jndi"

Package org.springframework.test
* added AbstractModelAndViewTests, a convenience super class for testing ModelAndView objects

Package org.springframework.transaction
* JtaTransactionManager only invokes rollback if transaction is still active (some JTA providers eagerly terminate)
* added TransactionNamespaceHandler to support dedicated "tx:*" XML tags

Package org.springframework.util
* added "isNull()" methods to Assert class
* added "setPathSeparator" method to AntPathMatcher, allowing to override the default path separator "/"
* fixed AntPathMatcher to correctly treat "*" right after separator, i.e. to accept path "/test/" for pattern "/test/*"
* WeakReferenceMonitor uses a daemon thread, to avoid a hanging thread even if weak references have not been released
* changed ConcurrencyThrottleSupport's default "concurrencyLimit" to -1 (keeping ConcurrencyThrottleInterceptor at 1)

Package org.springframework.web
* use NestedServletException wherever a root cause gets wrapped by a ServletException (for nicer root cause handling)
* WebApplicationContext interface does not extend ThemeSource anymore; implementing ThemeSource is now optional
* introduced ServletConfigAware interface, for getting access to a Framework/DispatcherServlet's ServletConfig object
* SimpleServletPostProcessor configures Servlets with DispatcherServlet's ServletConfig by default (can be turned off)
* introduced Handler interface as alternative to Controller, with no ModelAndView and only throwing Servlet/IOException
* AbstractCachingViewResolver guarantees at-most-once instantiation of each View instance (-> extended synchronization)
* added "currentFormObject" template method to AbstractFormController, for post-processing of a session form object
* "RequestContextUtils.getLocale(request)" falls back to the accept-header Locale if no LocaleResolver found
* FixedLocaleResolver returns the JVM's default Locale if no explicit default Locale specified
* VelocityView converts Velocity's MethodInvocationException to a Spring NestedServletException with original root cause

